//
//  LoginViewController.swift
//  CleanSwift
//
//  Created by Ha Linh on 9/5/18.
//  Copyright (c) 2018 HaLinh. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol LoginDisplayLogic: class
{
    func displayLoginResult(viewModel: Login.Login.ViewModel)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override func loadView() {
        super.loadView()
        setup()
        initView()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Init View
    var textFieldEmail: MTextField!
    var textFieldPassword: MTextField!
    var buttonLogin: MButton!
    
    private func initView() {
        // MARK: container view
        view = MView()
        // MARK: navigation
        navigationController?.isNavigationBarHidden = true
        // MARK: password text field
        textFieldPassword = MTextField()
        view.addSubview(textFieldPassword)
        textFieldPassword.snp.makeConstraints { (m) in
            m.centerY.equalToSuperview()
            m.leading.equalToSuperview().offset(K.UI.defaultMargin)
            m.trailing.equalToSuperview().offset(-K.UI.defaultMargin)
            m.height.equalTo(K.UI.defaultTextFieldHeight)
        }
        textFieldPassword.text = "123456"
        // MARK: email text field
        textFieldEmail = MTextField()
        view.addSubview(textFieldEmail)
        textFieldEmail.snp.makeConstraints { (m) in
            m.leading.equalTo(textFieldPassword.snp.leading)
            m.trailing.equalTo(textFieldPassword.snp.trailing)
            m.bottom.equalTo(textFieldPassword.snp.top).offset(-K.UI.defaultControlDistance)
            m.height.equalTo(K.UI.defaultTextFieldHeight)
        }
        textFieldEmail.text = "haduclinhbkit@gmail.com"
        // MARK: login button
        buttonLogin = MButton("Login")
        view.addSubview(buttonLogin)
        buttonLogin.snp.makeConstraints { (m) in
            m.height.equalTo(K.UI.defaultButtonHeight)
            m.leading.equalToSuperview().offset(K.UI.defaultMargin)
            m.trailing.equalToSuperview().offset(-K.UI.defaultMargin)
            m.bottom.equalTo(self.view.readableContentGuide.snp.bottom).inset(K.UI.defaultMargin)
        }
        buttonLogin.addTarget(self, action: #selector(self.login), for: .touchUpInside)
        
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @objc func login()
    {
        interactor?.login(request: Login.Login.Request(email: textFieldEmail.text!, password: textFieldPassword.text!))
    }
    
    func showError(_ error: String?) {
        let alert = UIAlertController(title: "Error", message: error, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .default) { _ in
            
        }
        alert.addAction(okAction)
        self.present(alert, animated: true, completion: nil)
    }
    
    func displayLoginResult(viewModel: Login.Login.ViewModel) {
        if viewModel.isError {
            showError(viewModel.errorMessage)
        } else {
            router?.routeToMain()
        }
    }
}
